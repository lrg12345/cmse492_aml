{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cfd36f8d-aec6-4f3f-a707-ec64cf70d149",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Processed training set saved to: data/train/housing_train_processed.csv\n",
      "   Shape: (16512, 17)\n"
     ]
    }
   ],
   "source": [
    "#!/usr/bin/env python3\n",
    "\"\"\"\n",
    "preprocessing_pipeline.py\n",
    "\n",
    "Reads the raw housing training set (13 columns),\n",
    "applies preprocessing via a scikit-learn Pipeline,\n",
    "and saves the processed dataset (24 features) to /data/train.\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# -----------------------------\n",
    "# Paths\n",
    "# -----------------------------\n",
    "TRAIN_PATH = os.path.join(\"data\", \"train\")\n",
    "RAW_TRAIN_FILE = os.path.join(TRAIN_PATH, \"housing_train.csv\")\n",
    "PROCESSED_TRAIN_FILE = os.path.join(TRAIN_PATH, \"housing_train_processed.csv\")\n",
    "\n",
    "# -----------------------------\n",
    "# Custom Transformer for Feature Engineering\n",
    "# -----------------------------\n",
    "class CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n",
    "    \"\"\"\n",
    "    Adds new attributes:\n",
    "    - rooms_per_household\n",
    "    - bedrooms_per_room\n",
    "    - population_per_household\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "    def fit(self, X, y=None):\n",
    "        return self\n",
    "\n",
    "    def transform(self, X):\n",
    "        rooms_per_household = X[:, 3] / X[:, 6]      # total_rooms / households\n",
    "        bedrooms_per_room = X[:, 4] / X[:, 3]        # total_bedrooms / total_rooms\n",
    "        population_per_household = X[:, 5] / X[:, 6] # population / households\n",
    "        return np.c_[X, rooms_per_household, bedrooms_per_room, population_per_household]\n",
    "\n",
    "# -----------------------------\n",
    "# Main Function\n",
    "# -----------------------------\n",
    "def main():\n",
    "    # 1. Load raw training set\n",
    "    housing = pd.read_csv(RAW_TRAIN_FILE)\n",
    "\n",
    "    # Separate features/labels\n",
    "    housing_labels = housing[\"median_house_value\"].copy()\n",
    "    housing_features = housing.drop(\"median_house_value\", axis=1)\n",
    "\n",
    "    # 2. Define numeric and categorical attributes\n",
    "    num_attribs = list(housing_features.drop(\"ocean_proximity\", axis=1))\n",
    "    cat_attribs = [\"ocean_proximity\"]\n",
    "\n",
    "    # 3. Numeric pipeline\n",
    "    num_pipeline = Pipeline([\n",
    "        (\"imputer\", SimpleImputer(strategy=\"median\")),\n",
    "        (\"attribs_adder\", CombinedAttributesAdder()),\n",
    "        (\"std_scaler\", StandardScaler())\n",
    "    ])\n",
    "\n",
    "    # 4. Full pipeline\n",
    "    full_pipeline = ColumnTransformer([\n",
    "        (\"num\", num_pipeline, num_attribs),\n",
    "        (\"cat\", OneHotEncoder(), cat_attribs),\n",
    "    ])\n",
    "\n",
    "    # 5. Fit and transform data\n",
    "    housing_prepared = full_pipeline.fit_transform(housing_features)\n",
    "\n",
    "    # 6. Convert to DataFrame\n",
    "    cat_encoder = full_pipeline.named_transformers_[\"cat\"]\n",
    "    cat_onehot = list(cat_encoder.get_feature_names_out(cat_attribs))\n",
    "\n",
    "    all_attribs = num_attribs + [\"rooms_per_household\",\n",
    "                                 \"bedrooms_per_room\",\n",
    "                                 \"population_per_household\"] + cat_onehot\n",
    "\n",
    "    housing_prepared_df = pd.DataFrame(housing_prepared, columns=all_attribs)\n",
    "\n",
    "    # Add labels back in\n",
    "    housing_prepared_df[\"median_house_value\"] = housing_labels.values\n",
    "\n",
    "    # 7. Save processed dataset\n",
    "    os.makedirs(TRAIN_PATH, exist_ok=True)\n",
    "    housing_prepared_df.to_csv(PROCESSED_TRAIN_FILE, index=False)\n",
    "\n",
    "    print(f\"✅ Processed training set saved to: {PROCESSED_TRAIN_FILE}\")\n",
    "    print(f\"   Shape: {housing_prepared_df.shape}\")\n",
    "\n",
    "# -----------------------------\n",
    "# Entry Point\n",
    "# -----------------------------\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (cmse492)",
   "language": "python",
   "name": "cmse492"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
